[["downstream.html", "Chapter 3 Analysis Using Seurat 3.1 Seurat object 3.2 Setup the Seurat object 3.3 Standard pre-processing workflow 3.4 Perform linear dimensional reduction 3.5 Cluster the cells 3.6 Run non-linear dimensional reduction (UMAP/tSNE)", " Chapter 3 Analysis Using Seurat The contents in this chapter are adapted from Seurat - Guided Clustering Tutorial with little modification. The data we used is a 10k PBMC data getting from 10x Genomics website. In this tutorial, we will learn how to Read 10X sequencing data and change it into a seurat object, QC and selecting cells for further analysis, Normalizing the data, Identification of highly variable features (feature selection), Scaling the data, Perform linear dimensional reduction and Visualization. 3.1 Seurat object The Seurat object serves as a container that contains both data (like the count matrix) and analysis (like PCA, or clustering results) for a single-cell dataset. Before using Seurat to analyze scRNA-seq data, we can first have some basic understanding about the Seurat object from here. 3.2 Setup the Seurat object library(dplyr) library(Seurat) library(patchwork) library(ggplot2) We start by reading in the data. The Read10X_h5 reads count matrix from 10X CellRanger hdf5 file, returning a unique molecular identified (UMI) count matrix. The values in this matrix represent the number of molecules for each feature (i.e. gene; row) that are detected in each cell (column). It can be used to read both scATAC-seq and scRNA-seq matrices. We next use the count matrix to create a Seurat object. # Load the PBMC dataset pbmc.data &lt;- Read10X_h5(&quot;./data/10k_PBMC.h5&quot;) # Initialize the Seurat object with the raw (non-normalized data). pbmc &lt;- CreateSeuratObject(counts = pbmc.data, project = &quot;pbmc10k&quot;, min.cells = 3, min.features = 200) pbmc ## An object of class Seurat ## 22432 features across 10813 samples within 1 assay ## Active assay: RNA (22432 features, 0 variable features) If we want to read data using the output of the cellranger pipeline from 10X directly, we can use Read10X() Read10X(data.dir) 3.3 Standard pre-processing workflow The steps below encompass the standard pre-processing workflow for scRNA-seq data in Seurat. These represent the selection and filtration of cells based on QC metrics, data normalization and scaling, and the detection of highly variable features. 3.3.1 QC and selecting cells for further analysis Seurat allows you to easily explore QC metrics and filter cells based on any user-defined criteria. A few QC metrics commonly used(Ilicic et al. 2016) by the community include The number of unique genes detected in each cell. low-quality cells or empty droplets will often have very few genes cell doublets or multiplets may exhibit an aberrantly high gene count similarly, the total number of molecules detected within a cell (correlates strongly with unique genes) The percentage of reads that map to the mitochondrial genome low-quality / dying cells often exhibit extensive mitochondrial contamination we calculate mitochondrial QC metrics with the PercentageFeatureSet() function, which calculates the percentage of counts originating from a set of features we use the set of all genes starting with MT- as a set of mitochondrial genes # The [[ operator can add columns to object metadata. This is a great place to stash QC stats pbmc[[&quot;percent.mt&quot;]] &lt;- PercentageFeatureSet(pbmc, pattern = &quot;^MT-&quot;) The number of unique genes and total molecules are automatically calculated during CreateSeuratObject(). They are stored in the object meta data. # Show QC metrics for the first 5 cells in the control group head(pbmc@meta.data, 5) ## orig.ident nCount_RNA nFeature_RNA percent.mt ## AAACCCAGTATATGGA-1 pbmc10k 860 350 44.1860465 ## AAACCCAGTATCGTAC-1 pbmc10k 1548 729 0.4521964 ## AAACCCAGTCGGTGAA-1 pbmc10k 6387 1827 10.4117739 ## AAACCCAGTTAGAAAC-1 pbmc10k 16664 3744 5.2808449 ## AAACCCAGTTATCTTC-1 pbmc10k 3352 1464 13.8424821 We can visualize the nFeature_RNA, nCount_RNA and percent.mt we used as QC metrics # Visualize QC metrics as a violin plot VlnPlot(pbmc, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), ncol = 3) We can then using dot plots to show the relationship between nCount_RNA, nFeature_RNA and percent.mt. # FeatureScatter is typically used to visualize feature-feature relationships, but can be used # for anything calculated by the object, i.e. columns in object metadata, PC scores etc. plot1 &lt;- FeatureScatter(pbmc, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) + theme(legend.position=&quot;none&quot;) plot2 &lt;- FeatureScatter(pbmc, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) + theme(legend.position=&quot;none&quot;) plot1 + plot2 Here, we filter cells that have unique feature counts over 5,000 or less than 200. We also filter cells that have &gt;15% mitochondrial counts pbmc &lt;- subset(pbmc, subset = nFeature_RNA &gt; 200 &amp; nFeature_RNA &lt; 5000 &amp; percent.mt &lt; 15) We can visualize QC metrics again after filtering cells VlnPlot(pbmc, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), ncol = 3) plot1 &lt;- FeatureScatter(pbmc, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) + theme(legend.position=&quot;none&quot;) plot2 &lt;- FeatureScatter(pbmc, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) + theme(legend.position=&quot;none&quot;) plot1 + plot2 3.3.2 Normalizing the data After removing unwanted cells from the dataset, the next step is to normalize the data. By default, we employ a global-scaling normalization method LogNormalize that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. Normalized values are stored in pbmc[[\"RNA\"]]@data. pbmc &lt;- NormalizeData(pbmc, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000, verbose = FALSE) For clarity, in this previous line of code (and in future commands), we provide the default values for certain parameters in the function call. However, this isnt required and the same behavior can be achieved with: pbmc &lt;- NormalizeData(pbmc) 3.3.3 Identification of highly variable features (feature selection) We next calculate a subset of features that exhibit high cell-to-cell variation in the dataset (i.e, they are highly expressed in some cells, and lowly expressed in others). It is shown that(Brennecke et al. 2013) focusing on these genes in downstream analysis helps to highlight biological signal in single-cell datasets. The procedure in Seurat is described in detail here(Stuart et al. 2019), and improves on previous versions by directly modeling the mean-variance relationship inherent in single-cell data, and is implemented in the FindVariableFeatures() function. By default, Seurat returns 2,000 features per dataset and these will be used in downstream analysis, like PCA. pbmc &lt;- FindVariableFeatures(pbmc, selection.method = &quot;vst&quot;, nfeatures = 2000, verbose = FALSE) # Identify the 10 most highly variable genes top10 &lt;- head(VariableFeatures(pbmc), 10) # plot variable features with and without labels plot1 &lt;- VariableFeaturePlot(pbmc) + theme(legend.position=&quot;top&quot;) plot2 &lt;- LabelPoints(plot = plot1, points = top10, repel = TRUE) + theme(legend.position=&quot;none&quot;) plot1 + plot2 3.3.4 Scaling the data Next, we apply a linear transformation (scaling) that is a standard pre-processing step prior to dimensional reduction techniques like PCA. The ScaleData() function: shifts the expression of each gene, so that the mean expression across cells is 0 scales the expression of each gene, so that the variance across cells is 1 this step gives equal weight in downstream analyses, so that highly-expressed genes do not dominate the results of this are stored in pbmc[[\"RNA\"]]@scale.data all.genes &lt;- rownames(pbmc) pbmc &lt;- ScaleData(pbmc, features = all.genes, verbose = FALSE) When using the above command, we use all genes to scale data. Scaling is an essential step in the Seurat workflow, but only on genes that will be used as input to PCA. Therefore, the default in ScaleData() is only to perform scaling on the previously identified variable features (2,000 by default). And it will make this step faster. In this case, our PCA and clustering results will be unaffected. However, Seurat heatmaps (produced as shown below with DoHeatmap()) require genes in the heatmap to be scaled, to make sure highly-expressed genes dont dominate the heatmap. To make sure we dont leave any genes out of the heatmap later, we are scaling all genes in this tutorial. If we want to scale on the previously identified 2000 variable features, we can simply omit the features argument in the previous function call, i.e. pbmc &lt;- ScaleData(pbmc) The ScaleData() function also allow us to remove unwanted sources of variation from a single-cell dataset. For example, we could regress out heterogeneity associated with (for example) cell cycle stage, or mitochondrial contamination. This feature can be achieved by specifying vars.to.regress, i.e.: pbmc &lt;- ScaleData(pbmc, vars.to.regress = &quot;percent.mt&quot;) However, particularly for advanced users who would like to use this functionality, it is recommended by Seurat using their new normalization workflow, SCTransform(). The method is described in Seurat paper(Hafemeister and Satija 2019), with a separate vignette using Seurat v3 here. As with ScaleData(), the function SCTransform() also includes a vars.to.regress parameter. 3.4 Perform linear dimensional reduction Next we perform PCA on the scaled data. By default, only the previously determined variable features are used as input, but can be defined using features argument if you wish to choose a different subset. pbmc &lt;- RunPCA(pbmc, features = VariableFeatures(object = pbmc), verbose = FALSE) Seurat provides several useful ways of visualizing both cells and features that define the PCA, including VizDimLoadings(), DimPlot(), and DimHeatmap(). # Examine and visualize PCA results a few different ways print(pbmc[[&quot;pca&quot;]], dims = 1:5, nfeatures = 5) ## PC_ 1 ## Positive: LTB, IL32, TRAC, CD3D, TRBC2 ## Negative: FCN1, FGL2, CST3, IFI30, TYMP ## PC_ 2 ## Positive: MS4A1, CD79A, BANK1, IGHM, NIBAN3 ## Negative: IL32, GZMM, CD3D, CD7, CD247 ## PC_ 3 ## Positive: GZMB, CLIC3, NKG7, GNLY, KLRD1 ## Negative: CCR7, LEF1, TRABD2A, TCF7, LTB ## PC_ 4 ## Positive: CD79B, MS4A1, GNLY, CD79A, LINC00926 ## Negative: LILRA4, CLEC4C, SERPINF1, TPM2, SCT ## PC_ 5 ## Positive: CDKN1C, HES4, CTSL, TCF7L2, BATF3 ## Negative: S100A12, ITGAM, VCAN, CES1, MGST1 VizDimLoadings(pbmc, dims = 1:2, reduction = &quot;pca&quot;) DimPlot(pbmc, reduction = &quot;pca&quot;) In particular DimHeatmap() allows for easy exploration of the primary sources of heterogeneity in a dataset, and can be useful when trying to decide which PCs to include for further downstream analyses. Both cells and features are ordered according to their PCA scores. Setting cells to a number plots the extreme cells on both ends of the spectrum, which dramatically speeds plotting for large datasets. Though clearly a supervised analysis, we find this to be a valuable tool for exploring correlated feature sets. DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE) DimHeatmap(pbmc, dims = 1:9, cells = 500, balanced = TRUE) To overcome the extensive technical noise in any single feature for scRNA-seq data, Seurat clusters cells based on their PCA scores, with each PC essentially representing a metafeature that combines information across a correlated feature set. The top principal components therefore represent a robust compression of the dataset. Here, we choose first 20 PCs. 3.5 Cluster the cells Seurat v3 applies a graph-based clustering approach, building upon initial strategies in(Macosko et al. 2015). Importantly, the distance metric which drives the clustering analysis (based on previously identified PCs) remains the same. However, approach in Seurat to partitioning the cellular distance matrix into clusters has dramatically improved. This approach was heavily inspired by recent publications which applied graph-based clustering approaches to scRNA-seq data(Xu and Su 2015) and CyTOF data(Levine et al. 2015). Briefly, these methods embed cells in a graph structure - for example a K-nearest neighbor (KNN) graph, with edges drawn between cells with similar feature expression patterns, and then attempt to partition this graph into highly interconnected quasi-cliques or communities. As in PhenoGraph, they first construct a KNN graph based on the euclidean distance in PCA space, and refine the edge weights between any two cells based on the shared overlap in their local neighborhoods (Jaccard similarity). This step is performed using the FindNeighbors() function, and takes as input the previously defined dimensionality of the dataset (first 20 PCs). To cluster the cells, we next apply modularity optimization techniques such as the Louvain algorithm (default) or SLM(Blondel et al. 2008), to iteratively group cells together, with the goal of optimizing the standard modularity function. The FindClusters() function implements this procedure, and contains a resolution parameter that sets the granularity of the downstream clustering, with increased values leading to a greater number of clusters. We find that setting this parameter between 0.4-1.2 typically returns good results for single-cell datasets of around 3K cells. Optimal resolution often increases for larger datasets. The clusters can be found using the Idents() function. pbmc &lt;- FindNeighbors(pbmc, dims = 1:20, verbose = FALSE) pbmc &lt;- FindClusters(pbmc, resolution = 0.5, verbose = FALSE) # Look at cluster IDs of the first 5 cells head(Idents(pbmc), 5) ## AAACCCAGTATCGTAC-1 AAACCCAGTCGGTGAA-1 AAACCCAGTTAGAAAC-1 AAACCCAGTTATCTTC-1 ## 2 4 2 8 ## AAACCCAGTTGCCGAC-1 ## 0 ## Levels: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 3.6 Run non-linear dimensional reduction (UMAP/tSNE) Seurat offers several non-linear dimensional reduction techniques, such as tSNE and UMAP, to visualize and explore these datasets. The goal of these algorithms is to learn the underlying manifold of the data in order to place similar cells together in low-dimensional space. Cells within the graph-based clusters determined above should co-localize on these dimension reduction plots. As input to the UMAP and tSNE, we suggest using the same PCs as input to the clustering analysis. pbmc &lt;- RunUMAP(pbmc, dims = 1:20, verbose = FALSE) ## Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric ## To use Python UMAP via reticulate, set umap.method to &#39;umap-learn&#39; and metric to &#39;correlation&#39; ## This message will be shown once per session Then we can get the UMAP plot of the single cell clustering results. DimPlot(pbmc, reduction = &quot;umap&quot;) We can also visualize it using tSNE plot pbmc &lt;- RunTSNE(pbmc, dims = 1:20, verbose = FALSE) DimPlot(pbmc, reduction = &quot;tsne&quot;) We can set label = TRUE or use the LabelClusters function to help label individual clusters. DimPlot(pbmc, reduction = &quot;umap&quot;, label = TRUE) plot &lt;- DimPlot(object = pbmc) LabelClusters(plot = plot, id = &#39;ident&#39;) Now it is time to save the object so that it can easily be loaded back in without having to rerun the computationally intensive steps performed above, or easily shared with collaborators. saveRDS(pbmc, file = &quot;./data/pbmc_processed.rds&quot;) References "]]
